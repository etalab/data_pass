RSpec.describe BackfillMalwareScanSha256Job do
  let(:attachment_with_blob) { create(:active_storage_attachment) }
  let(:expected_sha256) { 'dummy_sha256_hash' }

  before do
    allow(Digest::SHA256).to receive(:hexdigest).and_return(expected_sha256)
  end

  describe 'when MalwareScan exists and needs sha256' do
    subject { described_class.new.perform(scan_without_sha256.id) }

    let!(:scan_without_sha256) do
      scan = create(:malware_scan, attachment: attachment_with_blob)
      scan.update_column(:sha256, nil)
      scan
    end

    it 'updates the MalwareScan sha256' do
      expect { subject }.to change { scan_without_sha256.reload.sha256 }.from(nil).to(expected_sha256)
    end

    it 'computes SHA256 from attachment blob download' do
      expect(Digest::SHA256).to receive(:hexdigest).with(attachment_with_blob.blob.download)

      subject
    end
  end

  describe 'when MalwareScan already has sha256' do
    subject { described_class.new.perform(scan_with_sha256.id) }

    let!(:scan_with_sha256) { create(:malware_scan, sha256: 'existing_hash') }

    it 'does not update the MalwareScan' do
      expect { subject }.not_to change { scan_with_sha256.reload.sha256 }
    end

    it 'does not compute SHA256' do
      expect(Digest::SHA256).not_to receive(:hexdigest)

      subject
    end
  end

  describe 'when MalwareScan has no valid blob' do
    subject { described_class.new.perform(scan_without_blob.id) }

    let!(:scan_without_blob) do
      scan = create(:malware_scan)
      scan.update_column(:sha256, nil)
      scan
    end

    before do
      allow(scan_without_blob).to receive(:attachment).and_return(nil)
      allow(MalwareScan).to receive(:find_by).with(id: scan_without_blob.id).and_return(scan_without_blob)
    end

    it 'skips the MalwareScan' do
      original_sha256 = scan_without_blob.sha256
      subject
      expect(scan_without_blob.reload.sha256).to eq(original_sha256)
    end

    it 'does not compute SHA256' do
      expect(Digest::SHA256).not_to receive(:hexdigest)

      subject
    end
  end

  describe 'when MalwareScan does not exist' do
    subject { described_class.new.perform(999_999) }

    it 'does not raise an error' do
      expect { subject }.not_to raise_error
    end

    it 'does not compute SHA256' do
      expect(Digest::SHA256).not_to receive(:hexdigest)

      subject
    end
  end
end
