class MalwareScanJob < ApplicationJob
  include MalwareScanHelper

  RETRY_WAIT_TIME = 5.minutes

  class MalwareScanJobError < StandardError; end

  retry_on Faraday::ServerError, wait: RETRY_WAIT_TIME, attempts: :unlimited
  retry_on Faraday::ConnectionFailed, wait: RETRY_WAIT_TIME, attempts: :unlimited
  retry_on MalwareScanJobError, wait: RETRY_WAIT_TIME, attempts: :unlimited

  def perform(attachment_id)
    @attachment = ActiveStorage::Attachment.find_by(id: attachment_id)

    return if @attachment.blank? || @attachment.blob.blank?

    @uuid = Digest::SHA256.hexdigest(@attachment.blob.download)

    result_cache = check_remote_cache!

    if result_cache[:is_malware].nil?
      perform_scan_and_enqueue_state_retriever
    else
      create_malware_scan_from_cache(result_cache)
    end
  end

  private

  def perform_scan_and_enqueue_state_retriever
    scan = perform_scan!

    raise MalwareScanJobError unless scan.try(:[], :error).nil?

    malware_scan = MalwareScan.create!(uuid: @uuid, attachment: @attachment)

    MalwareScanRetrieveStateJob.perform_later(malware_scan.id)
  end

  def create_malware_scan_from_cache(result_cache)
    MalwareScan.create!(
      uuid: @uuid,
      attachment: @attachment,
      safety_state: extract_safety_state(result_cache),
      analyzed_at: Time.zone.at(result_cache[:analyzed_at]),
    )
  end

  def check_remote_cache!
    JeCliqueOuPasAPIClient.new.result(@uuid)
  end

  def perform_scan!
    JeCliqueOuPasAPIClient.new.analyze(@attachment)
  end
end
