RSpec.describe MalwareScan do
  it 'has valid factories' do
    expect(build(:malware_scan)).to be_valid
  end

  describe 'Attachment and MalwareScan Relationship' do
    let(:attachment) { create(:active_storage_attachment) }
    let(:malware_scan) { create(:malware_scan, attachment: attachment) }

    describe 'Dependent destroy behavior' do
      context 'when malware_scan is destroyed' do
        it 'does not destroy the attachment' do
          malware_scan.destroy!
          expect(ActiveStorage::Attachment.find_by(id: attachment.id)).to eq(attachment)
        end

        it 'handles deletion of a single malware scan correctly' do
          expect {
            ActiveRecord::Base.transaction do
              attachment.destroy!
            end
          }.not_to raise_error

          expect(described_class.where(attachment_id: attachment.id)).to be_empty
          expect(ActiveStorage::Attachment.exists?(id: attachment.id)).to be false
        end
      end

      describe 'Non-regression tests for attachment deletion' do
        context 'when handling foreign key constraint violations' do
          it 'successfully handles deletion when foreign key violation occurs' do
            allow(malware_scan).to receive(:destroy!)
              .and_raise(ActiveRecord::InvalidForeignKey.new(
                                                  'PG::ForeignKeyViolation: ERROR: foreign key violation'
                                                ))

            expect(Rails.logger).to receive(:warn)
              .with(/Failed to destroy malware_scan/)

            expect {
              attachment.destroy!
            }.not_to raise_error

            expect(described_class.exists?(id: malware_scan.id)).to be false
          end

          it 'recovers from RecordNotDestroyed errors' do
            allow(malware_scan).to receive(:destroy!)
              .and_raise(ActiveRecord::RecordNotDestroyed.new('Failed to destroy'))

            expect(Rails.logger).to receive(:warn)
              .with(/Failed to destroy malware_scan/)

            expect {
              attachment.destroy!
            }.not_to raise_error

            expect(described_class.exists?(id: malware_scan.id)).to be false
          end
        end
      end
    end
  end
end
