RSpec.describe MalwareScanRetrieveStateJob do
  subject { job_instance.perform_now }

  let(:job_instance) { described_class.new(uuid) }
  let(:uuid) { SecureRandom.uuid }
  let(:api_client_double) { instance_double(JeCliqueOuPasAPIClient) }
  let(:malware_scan) { MalwareScan.find_by(uuid:) }
  let!(:attachment) { create(:active_storage_attachment) }

  before do
    create(:malware_scan, uuid:, attachment:)
    allow(JeCliqueOuPasAPIClient).to receive(:new).and_return(api_client_double)
  end

  after do
    malware_scan.destroy
  end

  context 'when the file is unsafe' do
    before do
      allow(api_client_double).to receive(:result).and_return(
        {
          is_malware: true,
          analyzed_at: 1_637_835_534_067,
          error: nil
        }
      )
    end

    it 'calls JeCliqueOuPasAPIClient' do
      expect(api_client_double).to receive(:result).with(uuid)

      subject
    end

    it 'assigns unsafe state to MalwareScan' do
      subject

      expect(malware_scan.safety_state).to eq('unsafe')
    end
  end

  context 'when the file is safe' do
    before do
      allow(api_client_double).to receive(:result).and_return(
        {
          is_malware: false,
          analyzed_at: 1_637_835_534_067,
          error: nil
        }
      )
    end

    it 'assigns safe state to MalwareScan' do
      subject

      expect(malware_scan.safety_state).to eq('safe')
    end

    it 'assigns analyzed_at to MalwareScan' do
      subject

      expect(malware_scan.analyzed_at).to eq(Time.zone.at(1_637_835_534_067))
    end
  end

  context 'when the scan hasn\'t finished yet' do
    before do
      allow(job_instance).to receive_messages(attempts: 2)
      allow(api_client_double).to receive(:result).and_raise(MalwareScanRetrieveStateJob::MalwareScanRetrieveStateJobError)
    end

    it 'assigns ongoing_scan state to MalwareScan' do
      subject

      expect(malware_scan.safety_state).to eq('ongoing_scan')
    end
  end

  context 'when it failed enough' do
    before do
      allow(job_instance).to receive_messages(attempts: 60)
      allow(api_client_double).to receive(:result).and_raise(Faraday::ServerError)
    end

    it 'assigns unknown state to MalwareScan' do
      subject

      expect(malware_scan.safety_state).to eq('unknown')
    end
  end
end
