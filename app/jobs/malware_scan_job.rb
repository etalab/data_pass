class MalwareScanJob < ApplicationJob
  RETRY_WAIT_TIME = 5.minutes

  class MalwareScanJobError < StandardError; end

  retry_on Faraday::ServerError, wait: RETRY_WAIT_TIME, attempts: :unlimited
  retry_on Faraday::ConnectionFailed, wait: RETRY_WAIT_TIME, attempts: :unlimited
  retry_on MalwareScanJobError, wait: RETRY_WAIT_TIME, attempts: :unlimited

  def perform(attachment_id)
    @attachment = ActiveStorage::Attachment.find_by(id: attachment_id)

    return if @attachment.blank? || @attachment.blob.blank?

    scan_uuid = perform_scan.try(:[], :uuid)

    raise MalwareScanJobError if scan_uuid.blank?

    create_malware_scan_and_retrieve_state(scan_uuid)
  end

  private

  def create_malware_scan_and_retrieve_state(uuid)
    malware_scan = MalwareScan.create!(uuid:, attachment: @attachment)

    MalwareScanRetrieveStateJob.perform_later(malware_scan.id)
  end

  def perform_scan
    JeCliqueOuPasAPIClient.new.analyze(@attachment)
  end
end
