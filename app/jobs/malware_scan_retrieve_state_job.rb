class MalwareScanRetrieveStateJob < ApplicationJob
  include KeepTrackOfJobAttempts

  RETRY_WAIT_TIME = 1.minute
  RETRIES = 60

  class MalwareScanRetrieveStateJobError < StandardError; end

  retry_on MalwareScanRetrieveStateJobError, wait: RETRY_WAIT_TIME, attempts: RETRIES
  retry_on Faraday::ServerError, wait: RETRY_WAIT_TIME, attempts: RETRIES
  retry_on Faraday::ConnectionFailed, wait: RETRY_WAIT_TIME, attempts: RETRIES

  def perform(uuid)
    @uuid = uuid

    @result_analyze = api_client.result(@uuid)

    raise MalwareScanRetrieveStateJobError if safety_state.blank?

    malware_scan.update!(safety_state:, analyzed_at:)
  rescue MalwareScanRetrieveStateJobError, Faraday::ServerError, Faraday::ConnectionFailed
    malware_scan.update!(safety_state: :unknown, analyzed_at: Time.zone.now.to_i) if attempts == RETRIES
  end

  private

  def malware_scan
    @malware_scan ||= MalwareScan.find_by(uuid: @uuid)
  end

  def safety_state
    case @result_analyze[:is_malware]
    when true
      :unsafe
    when false
      :safe
    end
  end

  def analyzed_at
    Time.zone.at(@result_analyze[:analyzed_at])
  end

  def api_client
    @api_client ||= JeCliqueOuPasAPIClient.new
  end
end
