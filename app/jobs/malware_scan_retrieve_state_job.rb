class MalwareScanRetrieveStateJob < ApplicationJob
  RETRY_WAIT_TIME = 1.minute
  RETRIES = 60

  attr_reader :response

  class MalwareScanRetrieveStateJobError < StandardError; end

  retry_on MalwareScanRetrieveStateJobError, wait: RETRY_WAIT_TIME, attempts: RETRIES
  retry_on Faraday::ServerError, wait: RETRY_WAIT_TIME, attempts: RETRIES
  retry_on Faraday::ConnectionFailed, wait: RETRY_WAIT_TIME, attempts: RETRIES

  def perform(uuid)
    MalwareScan.find_by(uuid:).update!(safety_state: :ongoing_scan)

    @response = api_client.result(uuid)

    raise MalwareScanRetrieveStateJobError unless @response && safety_state

    MalwareScan.find_by(uuid:).update!(safety_state:, analyzed_at:)
  rescue MalwareScanRetrieveStateJobError, Faraday::ServerError, Faraday::ConnectionFailed
    MalwareScan.find_by(uuid:).update!(safety_state: :unknown, analyzed_at: Time.zone.now.to_i) if attempts == RETRIES
  end

  private

  def safety_state
    case @response[:is_malware]
    when true
      :unsafe
    when false
      :safe
    end
  end

  def analyzed_at
    return unless analyzed_at_raw

    Time.zone.at(analyzed_at_raw)
  end

  def analyzed_at_raw
    @response[:analyzed_at]
  end

  def api_client
    @api_client ||= JeCliqueOuPasAPIClient.new
  end
end
