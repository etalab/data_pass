openapi: 3.0.0
info:
  title: API DataPass
  description: |
    DataPass est un service de gestion des demandes d'habilitations pour accéder aux données et services de l'État.

    # Vocabulaire

    Les concepts manipulés par DataPass sont les suivants:
    - `Utilisateur` : Un utilisateur est un individu ayant un compte sur DataPass. Il peut être un demandeur ou un instructeur.
    - `Organisation` : Une organisation est un groupe d'utilisateurs représentée par un SIRET. Elle peut être une entreprise ou un service de l'État.
    - `Demande d'habilitation` : Les demandes d'habilitations représentent les données soumises via un formulaire par un demandeur. Une demande est liée à un type d'habilitation, un formulaire, une organisation et un utilisateur (le demandeur).
    - `Habilitation` : Une habilitation est un droit d'accès délivré à une organisation suite à la validation d'une demande par un instructeur.
    - `Définition d'habilitation` : Les demandes et les habilitations sont liées à une définition d'habilitation, qui définit les attributs de la demande.
    - `Formulaire` : Un formulaire définit l'interface de saisie des données d'une demande d'habilitation, avec ses éventuels champs pré-remplis en fonction des cas d'usage.

    # Cycle de vie d'une demande

    Consultez [la documentation sur le cycle de vie d'une demande](https://github.com/etalab/data_pass/blob/main/docs/lifecycle_documentation.md) pour comprendre comment les différents états d'une demande et de ses habilitations sont gérés.

    Pour le cas d'une habilitation avec étapes Bac à Sable et Production, consultez [la documentation sur le cycle de vie d'une demande avec étapes](https://github.com/etalab/data_pass/blob/main/docs/lifecycle_documentation_with_stages.md) pour comprendre comment la transition d'étape est gérée.

  version: 0.1.0
servers:
  - description: Production
    url: https://v2.datapass.api.gouv.fr/api/v1
  - description: Staging
    url: https://staging.v2.datapass.api.gouv.fr/api/v1
  - description: Sandbox
    url: https://sandbox.v2.datapass.api.gouv.fr/api/v1

tags:
  - name: Authentification
    description: |
      Authentification via OAuth2:
        1. Obtenir un jeton OAuth2 via le endpoint `/oauth/token`
        2. Utiliser le jeton pour effectuer des requêtes à l'API

      A noter qu'un client OAuth2 est associé à un utilisateur, et que les types de demandes d'habilitations accessibles sont régies par les droits associés à cet utilisateur. Pour qu'un utilisateur puisse manipuler à travers l'API les demandes d'habilitations d'un certain type, il doit être référencé comme étant développeur pour ce type d'habilitation dans DataPass. Pour cela, il faut qu'un administrateur l'ajoute manuellement.

      Vous pouvez consulter les droits de développeurs que vous avez ainsi que votre `client_id` et `client_secret` sur [votre profil](https://v2.datapass.api.gouv.fr/developpeurs/applications)
  - name: Demandes d'habilitations
    description: Les demandes d'habilitations représentent les données soumises via un formulaire par un demandeur. Une demande est liée à une définition, un formulaire, une organisation et un utilisateur (le demandeur).
  - name: Habilitations
    description: Les habilitations sont générées lors de la validation d'une demande d'habilitation par un instructeur. Elles contiennent les données de la demande au moment de la validation.
  - name: Événements
    description: Les événements représentent toutes les actions effectuées sur les demandes d'habilitations.
  - name: Utilisateurs

components:
  parameters:
    Authorization:
      name: Authorization
      in: header
      description: |
        Bearer token d'authentification obtenu via le endpoint OAuth2 `/oauth/token`.
      required: true
      schema:
        type: string
        example: "Bearer eyJhbGciOiJIUzI1NiJ9..."
  schemas:
    Demande:
      description: Demande d'habilitation
      properties:
        id:
          type: integer
          example: 123
          description: Identifiant unique de la demande
        public_id:
          type: string
          example: "ABC123"
          description: Identifiant public de la demande
        type:
          type: string
          example: "AuthorizationRequest::APIImpotParticulier"
          description: Type de la demande. (TODO ajouter le endpoint de liste des définitions d'habilitations)
        state:
          type: string
          example: "submitted"
          description: État actuel de la demande. Plus de détails dans la [documentation sur le cycle de vie d'une demande](https://github.com/etalab/data_pass/blob/main/docs/lifecycle_documentation.md)
          enum:
            - draft
            - submitted
            - changes_requested
            - validated
            - refused
            - archived
            - revoked
        form_uid:
          type: string
          example: "api-particulier-cantine-de-france"
          description: Identifiant du formulaire utilisé pour la demande. (TODO ajouter le endpoint de liste des formulaires)
        data:
          type: object
          description: Données remplies par le demandeur dans le formulaire. (TODO ajouter le endpoint de liste des définitions d'habilitations)
          additionalProperties: true
        created_at:
          type: string
          format: date-time
          description: Date de création de la demande
        last_submitted_at:
          type: string
          format: date-time
          description: Date de la dernière soumission de la demande par le demandeur
          nullable: true
        last_validated_at:
          type: string
          format: date-time
          description: Date de la dernière validation de la demande par un instructeur
          nullable: true
        reopening:
          type: boolean
          description: Indique si la demande est en cours de réouverture
          example: false
        reopened_at:
          type: string
          format: date-time
          description: Date à laquelle la demande a été réouverte
          nullable: true
        organisation:
          $ref: '#/components/schemas/Organisation'
        applicant:
          $ref: '#/components/schemas/Utilisateur'
        service_provider:
          $ref: '#/components/schemas/ServiceProvider'
        habilitations:
          type: array
          description: Liste des habilitations associées à la demande.
          items:
            $ref: '#/components/schemas/Habilitation'
      required:
        - id
        - public_id
        - type
        - state
        - form_uid
        - data
        - created_at
        - organisation

    Utilisateur:
      type: object
      description: Utilisateur associé à la demande ou à l'événement
      properties:
        id:
          type: integer
          example: 42
          description: Identifiant technique de l'utilisateur
        uid:
          type: string
          example: "external-uid-123"
          description: Identifiant externe de l'utilisateur
        email:
          type: string
          example: utilisateur@gouv.fr
          description: Adresse email de l'utilisateur
        given_name:
          type: string
          example: "Jean"
          description: Prénom de l'utilisateur
          nullable: true
        family_name:
          type: string
          example: "Dupont"
          description: Nom de famille de l'utilisateur
          nullable: true
        phone_number:
          type: string
          example: "+33123456789"
          description: Numéro de téléphone de l'utilisateur
          nullable: true
        job_title:
          type: string
          example: "Responsable informatique"
          description: Titre du poste de l'utilisateur
          nullable: true
      required:
        - id
        - email
        - uid

    Organisation:
      type: object
      description: Organisation associée à la demande
      properties:
        id:
          type: integer
          example: 51
          description: Identifiant technique de l'organisation
        siret:
          type: string
          example: "13002526500013"
          description: Numéro de SIRET de l'organisation
        name:
          type: string
          example: Direction interministérielle du numerique (DINUM)
          description: Raison sociale de l'organisation
          nullable: true
        insee_payload:
          type: object
          description: Données INSEE associées à l'organisation. Voir [la documentation sur l'API Sirene](https://portail-api.insee.fr/catalog/api/2ba0e549-5587-3ef1-9082-99cd865de66f?aq=ALL) et spécifiquement le endpoint `GET /siret/{siret}` de [le fichier Open API](https://api-apimanager.insee.fr/portal/environments/DEFAULT/apis/2ba0e549-5587-3ef1-9082-99cd865de66f/pages/6548510e-c3e1-3099-be96-6edf02870699/content) pour plus d'informations.
          additionalProperties: true
      required:
        - id
        - siret

    ServiceProvider:
      type: object
      description: Prestataire de service associé à la demande (Typiquement l'éditeur de logiciel au service d'une collectivité).
      properties:
        id:
          type: integer
          example: 456
          description: Identifiant unique du prestataire de service
        siret:
          type: string
          example: "12345678901234"
          description: Numéro SIRET du prestataire
        type:
          type: string
          example: "SoftwareVendor"
          description: Type de prestataire de service
      required:
        - id
        - siret
        - type

    Habilitation:
      type: object
      description: Habilitation délivrée à une organisation
      properties:
        id:
          type: integer
          example: 789
          description: Identifiant unique de l'habilitation
        slug:
          type: string
          example: "habilitation-123"
          description: Slug de l'habilitation
        revoked:
          type: boolean
          example: false
          description: Indique si l'habilitation a été révoquée. Ce booléen fait foi pour l'état révoqué de l'habilitation. (Une habilitation peut être `state:obsolete` et `revoked:true`).
        state:
          type: string
          example: "active"
          description: État de l'habilitation. L'état `obsolete` est utilisé pour indiquer que l'habilitation n'est plus active suite à la génération d'une nouvelle habilitation du même type par la même demande.
          enum:
            - active
            - obsolete
            - revoked
        created_at:
          type: string
          format: date-time
          description: Date de création de l'habilitation, correspondant à la date de validation de la demande d'habilitation par l'instructeur.
        data:
          type: object
          description: Données contenues dans la demande d'habilitation au moment de la validation par l'instructeur.
          additionalProperties: true
        authorization_request_class:
          type: string
          example: "AuthorizationRequest::APIParticulier"
          description: Classe de la demande d'autorisation associée à l'habilitation
      required:
        - id
        - slug
        - revoked
        - state
        - created_at
        - authorization_request_class

    HabilitationDetailed:
      allOf:
        - $ref: "#/components/schemas/Habilitation"
        - type: object
          properties:
            demande_id:
              type: integer
              example: 123
              description: Identifiant de la demande d'habilitation associée
            organization:
              $ref: "#/components/schemas/Organisation"

    AuthorizationRequestEvent:
      type: object
      description: Événement associé à une demande d'habilitation
      properties:
        id:
          type: integer
          example: 1011
          description: Identifiant unique de l'événement
        name:
          type: string
          example: "validation"
          description: Nom de l'événement
        created_at:
          type: string
          format: date-time
          description: Date et heure de l'événement
      required:
        - id
        - name
        - created_at

    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              status:
                type: string
                description: "Le code d'état HTTP associé à l'erreur."
                example: "422"
              source:
                type: object
                properties:
                  pointer:
                    type: string
                    description: "Un pointeur JSON indiquant l'attribut source de l'erreur."
                    example: "/data/attributes/nom"
                required:
                  - pointer
              title:
                type: string
                description: "Un titre court pour l'erreur."
                example: "Validation Error"
              detail:
                type: string
                description: "Un message détaillé décrivant l'erreur."
                example: "Le nom ne peut pas être vide."
            required:
              - status
              - title
              - detail
    
    Me:
      type: object
      description: Informations sur l'utilisateur courant associé au jeton OAuth2
      properties:
        id:
          type: integer
          example: 42
          description: Identifiant technique de l'utilisateur
        email:
          type: string
          example: utilisateur@gouv.fr
          description: Adresse email de l'utilisateur
        family_name:
          type: string
          example: "Dupont"
          description: Nom de famille de l'utilisateur
          nullable: true
        given_name:
          type: string
          example: "Jean"
          description: Prénom de l'utilisateur
          nullable: true
        job_title:
          type: string
          example: "Responsable informatique"
          description: Titre du poste de l'utilisateur
          nullable: true
      required:
        - id
        - email
  responses:
    NotFoundError:
      description: Resource non trouvée
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    UnauthorizedError:
      description: Accès non autorisé - le jeton n'est pas valide ou absent.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    ForbiddenError:
      description: Accès interdit - les scopes associés au jeton ne permettent pas d'effectuer cette action.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    ValidationError:
      description: La sauvegarde ou la mise à jour a échoué.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

paths:
  /oauth/token:
    post:
      summary: Obtenir un jeton OAuth2
      description: |
        Obtenir un jeton OAuth2 pour accéder aux ressources de l'API. 
      tags:
        - Authentification
      security: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - grant_type
                - client_id
                - client_secret
              properties:
                grant_type:
                  type: string
                  description: Type de demande OAuth2 (actuellement seul 'client_credentials' est supporté)
                  example: client_credentials
                client_id:
                  type: string
                  description: Identifiant du client OAuth2
                  example: "abc123def456"
                client_secret:
                  type: string
                  description: Secret du client OAuth2
                  example: "secret_token_value"
      responses:
        200:
          description: Jeton d'accès obtenu avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: Jeton d'accès à utiliser pour les requêtes authentifiées
                    example: "eyJhbGciOiJIUzI1NiJ9..."
                  token_type:
                    type: string
                    description: Type de jeton
                    example: "Bearer"
                  expires_in:
                    type: integer
                    description: Durée de validité du jeton en secondes
                    example: 7200
                  created_at:
                    type: integer
                    description: Timestamp de création du jeton
                    example: 1613749329
                required:
                  - access_token
                  - token_type
        400:
          description: Paramètres de demande invalides
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          description: Authentification échouée (client_id ou client_secret invalide)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /demandes:
    get:
      summary: Liste des demandes d'habilitations
      description: Récupère la liste des demandes d'habilitations associées aux droits développeur de l'utilisateur.
      tags:
        - Demandes d'habilitations
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: limit
          in: query
          description: Nombre maximum de demandes à récupérer
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 1000
        - name: offset
          in: query
          description: Nombre de demandes à sauter avant de commencer à récupérer les résultats
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: state
          in: query
          description: "Filtrer les demandes par statut (ex: draft, submitted, validated, refused, archived, revoked). Peut être un tableau (ex: state[]=draft&state[]=submitted)"
          required: false
          schema:
            type: array
            items:
              type: string
              enum: [draft, submitted, changes_requested, validated, refused, archived, revoked]
      responses:
        200:
          description: Liste des demandes récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Demande"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /demandes/{id}:
    get:
      summary: Récupérer une demande d'habilitation
      description: Récupère les détails d'une demande d'habilitation spécifique.
      tags:
        - Demandes d'habilitations
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: id
          in: path
          description: Identifiant de la demande d'habilitation
          required: true
          schema:
            type: string
      responses:
        200:
          description: Demande d'habilitation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Demande"
        404:
          $ref: "#/components/responses/NotFoundError"

  /demandes/{id}/events:
    get:
      summary: Récupérer les événements associés à une demande d'habilitation
      description: Récupère la liste des événements associés à une demande d'habilitation spécifique.
      tags:
        - Événements
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: id
          in: path
          required: true
          description: Identifiant de la demande d'habilitation
          schema:
            type: string
      responses:
        200:
          description: Liste des événements associés à la demande
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorizationRequestEvent'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'

  /habilitations:
    get:
      summary: Liste des habilitations
      description: Récupère la liste des habilitations auxquelles l'utilisateur a accès.
      tags:
        - Habilitations
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: limit
          in: query
          description: Nombre maximum d'habilitations à récupérer
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 1000
        - name: offset
          in: query
          description: Nombre d'habilitations à sauter avant de commencer à récupérer les résultats
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: state
          in: query
          description: "Filtrer les habilitations par statut (ex: active, obsolete, revoked). Peut être un tableau (ex: state[]=active&state[]=obsolete)"
          required: false
          schema:
            type: array
            items:
              type: string
              enum: [active, obsolete, revoked]
      responses:
        200:
          description: Liste des habilitations récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/HabilitationDetailed"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /habilitations/{id}:
    get:
      summary: Récupérer une habilitation
      description: Récupère les détails d'une habilitation spécifique.
      tags:
        - Habilitations
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: id
          in: path
          description: Identifiant de l'habilitation
          required: true
          schema:
            type: string
      responses:
        200:
          description: Habilitation récupérée avec succès
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/HabilitationDetailed"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"

  /me:
    get:
      summary: Récupérer les informations de l'utilisateur courant
      description: Récupère les informations de l'utilisateur associé au token d'authentification.
      tags:
        - Utilisateurs
      parameters:
        - $ref: '#/components/parameters/Authorization'
      responses:
        200:
          description: Informations de l'utilisateur
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Me"
        401:
          $ref: "#/components/responses/UnauthorizedError"