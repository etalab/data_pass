class MalwareScanRetrieveStateJob < ApplicationJob
  include KeepTrackOfJobAttempts
  include MalwareScanHelper

  RETRY_WAIT_TIME = 1.minute
  RETRIES = 60

  class MalwareScanRetrieveStateJobError < StandardError; end

  retry_on MalwareScanRetrieveStateJobError, wait: RETRY_WAIT_TIME, attempts: RETRIES
  retry_on Faraday::ServerError, wait: RETRY_WAIT_TIME, attempts: RETRIES
  retry_on Faraday::ConnectionFailed, wait: RETRY_WAIT_TIME, attempts: RETRIES

  def perform(malware_scan_id)
    malware_scan = MalwareScan.find(malware_scan_id)

    sha256 = malware_scan.sha256

    result_analyze = api_client.result(sha256)

    safety_state = extract_safety_state(result_analyze)

    raise MalwareScanRetrieveStateJobError if safety_state.blank?

    malware_scan.update!(safety_state:, analyzed_at: Time.zone.at(result_analyze[:analyzed_at]))
  rescue MalwareScanRetrieveStateJobError, Faraday::ServerError, Faraday::ConnectionFailed
    malware_scan.update!(safety_state: :unknown, analyzed_at: Time.zone.now) if attempts == RETRIES
  end

  private

  def api_client
    @api_client ||= JeCliqueOuPasAPIClient.new
  end
end
