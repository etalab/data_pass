RSpec.describe MalwareScanJob do
  subject { described_class.new(attachment_id).perform_now }

  let(:uuid) { SecureRandom.uuid }
  let(:api_client_double) { instance_double(JeCliqueOuPasAPIClient) }
  let(:attachment) { create(:active_storage_attachment) }
  let(:attachment_id) { attachment.id }
  let(:result_response) do
    {
      is_malware: true,
      analyzed_at: 1_637_835_534_067,
      error: nil
    }
  end

  before do
    allow(Digest::SHA256).to receive(:hexdigest).with(attachment.blob.download).and_return(uuid)
    allow(JeCliqueOuPasAPIClient).to receive(:new).and_return(api_client_double)

    allow(api_client_double).to receive_messages(analyze: { uuid:, errors: nil }, result: result_response)
  end

  it 'checks if a result exist in cache' do
    expect(api_client_double).to receive(:result).with(uuid)

    subject
  end

  describe 'if a result was found' do
    it 'does not launch the malware scan' do
      expect(api_client_double).not_to receive(:analyze)

      subject
    end

    it 'creates a MalwareScan with cache params' do
      expect { subject }.to change(MalwareScan, :count).by(1)
      expect(MalwareScan.last.uuid).to eq(uuid)
      expect(MalwareScan.last.safety_state).to eq('unsafe')
      expect(MalwareScan.last.attachment).to eq(attachment)
    end

    it 'does not call MalwareScanRetrieveStateJob' do
      subject

      expect(MalwareScanRetrieveStateJob).not_to have_been_enqueued.with(MalwareScan.last.id)
    end
  end

  describe 'if a result was not found' do
    let(:result_response) do
      {
        is_malware: nil,
        analyzed_at: nil,
        error: 'file not found'
      }
    end

    it 'launches the malware scan' do
      expect(api_client_double).to receive(:analyze).with(attachment)

      subject
    end

    it 'creates a MalwareScan with right params' do
      expect { subject }.to change(MalwareScan, :count).by(1)
      expect(MalwareScan.last.uuid).to eq(uuid)
      expect(MalwareScan.last.safety_state).to eq('pending')
      expect(MalwareScan.last.attachment).to eq(attachment)
    end

    it 'calls MalwareScanRetrieveStateJob with the new MalwareScan id' do
      subject

      expect(MalwareScanRetrieveStateJob).to have_been_enqueued.with(MalwareScan.last.id)
    end
  end
end
